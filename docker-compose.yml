version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: medical_chatbot_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-123456}
      MYSQL_DATABASE: ${DB_NAME:-medical_chatbot}
      MYSQL_USER: ${DB_USER:-medchat}
      MYSQL_PASSWORD: ${DB_PASSWORD:-medchat123}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - medical_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: .
    container_name: medical_chatbot_backend
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=mysql+pymysql://${DB_USER:-medchat}:${DB_PASSWORD:-medchat123}@mysql:3306/${DB_NAME:-medical_chatbot}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-1.5-flash}
      - MODEL_PATH=app/models/phobert_medchat_model.pt
      - ID2LABEL_PATH=app/assets/id2label.json
    volumes:
      - ./app:/app/app
      - ./frontend:/app/frontend
      - model_data:/app/app/models
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - medical_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Nginx)
  frontend:
    image: nginx:alpine
    container_name: medical_chatbot_frontend
    restart: unless-stopped
    ports:
      - "5500:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - medical_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  medical_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  model_data:
    driver: local
